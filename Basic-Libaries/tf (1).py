# -*- coding: utf-8 -*-
"""tf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gpHsLT-Wr3tpNzQabxxejaLszB8Q9Dcb
"""

!pip install tensorflow

import tensorflow as tf
#CreatingandManipulatingTensors
tensor = tf.constant([1,2,3,4,5])
print(tensor)

#element vise multiply

a = tf.constant([1,2,3,4,5])
b = tf.constant([6,7,8,9,10])
c =  tf.multiply(a,b)
c

#matrix multiplication

a = tf.constant([1,2,3])
b = tf.constant([6,7,8])
d = tf.matmul(tf.reshape(a ,[1,3]) , tf.reshape(b , [3,1]))
d

import tensorflow as tf

a = tf.constant([1, 2, 3])
b = tf.constant([6, 7, 8])

# Reshape 'a' and 'b' to row vectors
a_reshaped = tf.reshape(a, [1, 3])
b_reshaped = tf.reshape(b, [3, 1])

# Perform matrix multiplication
d = tf.matmul(a_reshaped, b_reshaped)

print(d)

"""**Tensor Flow data types**

TensorFlow supports various data types, including integers,floats, and strings. can specify the data type when creating a tensor
"""

import tensorflow as tf

# Creating a tensor of shape (2, 3) with float32 data type
tensor_float32 = tf.constant([[1.5, 2.3, 3.1], [4.2, 5.9, 6.7]], dtype=tf.float32)
# Creating a tensor of shape (2, 3) with int64 data type
tensor_int64 = tf.constant([[1,2,3],[4,5,6]], dtype=tf.int64)
# Creating a tensor of shape (2, 2) with bool data type
tensor_bool = tf.constant([[True, False], [False, True]], dtype=tf.bool)
# Creating a tensor of shape (2, 2) with complex64 data type
tensor_complex64 = tf.constant([[1 + 2j, 3 + 4j], [5 + 6j, 7 + 8j]], dtype=tf.complex64)

tensor_float32

tensor_int64

tensor_bool

tensor_complex64



"""**TensorFlowVariables**

Variables are mutable tensors in TensorFlow that can hold values that can be updated during training. They are commonly used to store the model's trainable parameters. To create a variable use the tf.Variable class:
"""

import tensorflow as tf

# Creating a variable initialized with zeros
my_variable = tf.Variable(tf.zeros(shape=(3, 4)))

my_variable

# Creating a variable initialized with a specific value
initial_value = tf.random.normal(shape=(2, 2))
my_variable = tf.Variable(initial_value)

my_variable



"""**Neural networks**

Neural networks are a fundamental component of modern
machine learning. They are composed of interconnected
layers of nodes (neurons) that perform computations on input data to produce output predictions. TensorFlow provides a high-level API, tf.keras, for building neural networks efficiently.
"""

def unpickle(file):
    import pickle
    with open(file, 'rb') as fo:
        dict = pickle.load(fo, encoding='bytes')
    return dict

from IPython.display import HTML
url = 'https://en.wikipedia.org/wiki/Iris_flower_data_set'
iframe = '<iframe src=' + url + ' width="100%" height=400></iframe>'
HTML(iframe)

import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
import numpy as np

# We will fix a random seed for reproducibility:
seed = 11
np.random.seed(seed)

# We now import the Iris dataset:
iris = load_iris()

# And set the features and labels vectors from it:
x = iris.data
y = iris.target
names = iris.target_names
feature_names = iris.feature_names

# We can load some elements to verify the contents in the dataset:
elements_to_display = [0, 50, 100]  # Indices of elements to display
for element in elements_to_display:
    print(f"Element {element}th:")
    print(f"  - Features: {x[element]}")
    print(f"  - Target: {y[element]}")
    print(f"  - Species: {names[y[element]]}")
    print()


# Define the model architecture
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(784,)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
'''
# Train the model
model.fit(train_images, train_labels, epochs=10, batch_size=32)

# Make predictions using the trained model
predictions = model.predict(test_images)

'''

